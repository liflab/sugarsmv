# ---------------------------------------
# BNF grammar for NuSMV input files
# ---------------------------------------

# Definition of the top-level document structure

#<document>      := VAR <varsection> INIT <initsection> TRANS <transsection>;
<document> := INIT <initsection> TRANS;

# Definitions of the VAR section

<varsection>    := <varname> : <vartype> \u003b <varsection> | ε;
<vartype>       := <type_boolean> | <type_intrange> | <type_set>;
<type_boolean>  := boolean;
<type_intrange> := [ <int> .. <int> ];
<type_set>      := { <elem_list> };
<elem_list>     := <elem_name> | <elem_name> , <elem_list>;
<varname>       := <label> ;
<elem_name>     := <label>;

# Definitions of the INIT section

<initsection>   := <φ>;

# Definitions of the TRANS section

<transsection>  := <φ>;

# Other definitions

<int>           := ^[0-9]+;
<label>         := ^[a-z]+;

# Boolean expressions
# This part of the grammar is a bit more complex than it (sh)could be,
# as NuSMV allows a relaxed syntax. For example, it is possible to write
# p & q & r, although & is a binary connective and parentheses are
# in theory needed.

<φ>             := <and> | <or> | <atom> | ( <φ> );
                   #| <negation> | <implies>;

<and>           := <atom> & <and> | ( <φ> ) & <and> | 
                   <atom> & ( <φ> ) | <atom> & <atom> ;

<or>            := <atom> \u007c <or> | ( <φ> ) \u007c <or> |
                   <atom> \u007c ( <φ> ) | <atom> \u007c <atom> ;

<negation>      := ! <atom> | ! ( <φ> );

<implies>       := <atom> -\u003e <atom> | <atom> -\u003e ( <φ> ) |
                   ( <φ> ) -\u003e <atom> | ( <φ> ) -\u003e ( <φ> );

<atom>          := <bool_term> = <bool_term> | 
                   <bool_term> gt <bool_term> | 
                   <bool_term> lt <bool_term>;

<bool_term>     := <next_exp> | <var> ;

<var>           := ^[\w\d]+;

<next_exp>      := next( <var> );